package com.ChatApp.models;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonManagedReference;



@Entity
@Table(name = "users")
public class User {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	
	@Column(unique = true, nullable = false)
	@Size(min=1,message="Invalid username")
	private String username;
	

	@Column(nullable = false)
	@Size(min=6, message="Password must at least contain 6 characters")
	private String password;
	
	@Column(unique = true, nullable = false)
	@NotNull
	@Pattern(regexp = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$", message="Email address is invalid")
	private String email;
	
//	@ManyToMany(cascade={CascadeType.REFRESH},fetch = FetchType.EAGER)
//	@LazyCollection(LazyCollectionOption.FALSE)
//	@JoinTable(name="ChatPartipants", joinColumns = @JoinColumn(name="user_id", referencedColumnName="id"), inverseJoinColumns = @JoinColumn(name="chat_id", referencedColumnName="chatId"))
//	@JsonBackReference
//	private List<Chat> chats = new ArrayList<>();
	
	@OneToMany(mappedBy="user", cascade=CascadeType.ALL)
	@JsonManagedReference
	private List<ChatParticipants> chatParticipants = new ArrayList<ChatParticipants>();
	
	
	public User() {
		super();
	}

	public User(@NotNull String fname, @NotNull String lname, String username, @NotNull String password,
			@NotNull String email) {
		super();
		this.username = username;
		this.password = password;
		this.email = email;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}



	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public List<Chat> getChats() {
		List<Chat> chats = new ArrayList<Chat>();
		for(ChatParticipants cp: this.chatParticipants) {
			chats.add(cp.getChat());
		}
		return chats;
	}
//
//	public void setChats(List<Chat> chats) {
//		this.chats = chats;
//	}
//
//
//	@Override
//	public String toString() {
//		return "User [id=" + id + ", username=" + username + ", password=" + password + ", email=" + email
//				 + ", chats=" + chats + "]";
//	}

	@Override
	public boolean equals(Object obj) {
		User u =(User) obj;
		if(id == u.id)
			return true;
		return false;
	}
	
	
}

