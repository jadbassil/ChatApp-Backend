package com.ChatApp.controllers;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;
import com.ChatApp.models.Chat;
import com.ChatApp.models.Message;
import com.ChatApp.models.User;
import com.ChatApp.repositories.ChatRepository;
import com.ChatApp.repositories.UserRepository;

@RestController
@RequestMapping("/messages")
public class messageController {

	@Autowired
	private ChatRepository chatRepository;
	@Autowired
	private UserRepository userRepository;
	
	@GetMapping("/getMessages")
	public Map<String, Object> getMessages(@RequestParam String chatid){
		Map<String, Object> response = new HashMap<String, Object>();
		Chat chat = chatRepository.findById(Integer.parseInt(chatid)).orElse(null);
		if(chat == null) {
			response.put("success", "false");
			response.put("message", "Chat doesn't exist");
			return response;
		}
		Set<Message> messages = chat.getMessages();
		ArrayList<Message> msgs = new ArrayList<Message>();
		for(Message msg: messages) {
//			Map<String, String> content = new HashMap<String, String>();
//			content.put("message", msg.getMessage());
//			content.put("sender", msg.getSenderName());
//			content.put("time", msg.getTimejs());
			User user = userRepository.findById(msg.getSenderId()).orElse(null);
			msg.setSenderName(user.getUsername());
			msgs.add(msg);
		}
		response.put("success", "true");
		response.put("messages", msgs);
		return response;
	}
	
	@PostMapping("/newMessage")
	public Map<String, Object> newMessage(@RequestParam String message, @RequestParam String senderId, @RequestParam String chatId, HttpSession session) {
		Map<String, Object> response = new HashMap<String, Object>();
		System.out.println("message: "+message);
		User user = userRepository.findById(Integer.parseInt(senderId)).orElse(null);
		ModelAndView mav = new ModelAndView();
		if(user == null) {
			response.put("success", "false");
			response.put("message", "user doesn't exist");
			return response;
		}
		Integer cid = Integer.valueOf(chatId);
		Integer sid = Integer.valueOf(senderId);
		Chat chat = chatRepository.findById(cid).orElse(null);
		Date time = new Date();
		Message msg = new Message();
		msg.setMessage(message);
		msg.setTime(time);
		msg.setChat(chat);
		msg.setSenderId(sid);
		msg.setSenderName(user.getUsername());
		System.out.println(msg);
		chat.getMessages().add(msg);
		chatRepository.save(chat);
		response.put("chat", chat);
		mav.setView(new RedirectView("/chat?id="+cid, true));
		return response;
	}
	
    @SuppressWarnings("deprecation")
	@MessageMapping("/{id}")
    @SendTo("/chat/{id}")
    public String greeting(String message, @DestinationVariable("id") String id) throws Exception {
    	System.out.println("test");
    	System.out.println(message);
    	String[] msg_info = message.split(";");
    	System.out.println(msg_info[0] + ' ' + msg_info[1]);
    	Message msg = new Message();
    	Chat chat = chatRepository.findById(Integer.valueOf(id)).orElse(null);
    	msg.setMessage(msg_info[0]);
    	msg.setSenderId(Integer.parseInt(msg_info[1]));
    	msg.setChat(chat);
        msg.setTime(new Date());
        chat.getMessages().add(msg);
        chatRepository.save(chat);
//        msg.setTimejs(msg.getTime().getHours()+":"+msg.getTime().getMinutes());
//        for(User u: chat.getUsers()){
//        	if(u.getId() == msg.getSenderId())
//        		msg.setSenderName(u.getUsername());
//        }
    	return "success";
    }
	
}
